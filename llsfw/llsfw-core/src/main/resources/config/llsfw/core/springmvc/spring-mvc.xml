<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 引入资源文件 -->
    <context:property-placeholder location="classpath*:resources.properties" />

    <!-- 引入拦截器配置文件 -->
    <import resource="classpath:spring-interceptors.xml" />

    <!-- 开启controller注解支持 关闭默认的过滤器,并且只扫描Controller和ControllerAdvice -->
    <context:component-scan base-package="com.*.*.controller.*" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <mvc:annotation-driven conversion-service="conversionService">

        <!-- 异步支持 默认30秒超时 -->
        <!-- <mvc:async-support default-timeout="30000" task-executor="executor" /> -->

        <!-- 消息转换器 -->
        <mvc:message-converters>
            <!-- 字节流转换器 -->
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
            <!-- string转换器,编码为UTF-8，防止乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!-- json转换器 -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 类型转换及数据格式化 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />

    <!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler />

    <!-- 设置默认主页 -->
    <mvc:view-controller path="/" view-name="redirect:${mvc.homePage}" />

    <!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理 -->
    <mvc:resources mapping="${mvc.resources.mapping}" location="${mvc.resources.location}" />

    <!-- 视图解释器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="contentType" value="text/html" />
        <property name="prefix" value="${mvc.view.prefix}" />
        <property name="suffix" value="${mvc.view.suffix}" />
    </bean>

    <!-- 上传拦截，如最大上传值及最小上传值 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置最大上传文件大小为 -->
        <property name="maxUploadSize" value="${mvc.maxUploadSize}" />
        <!-- 设置最大上在内存中的大小 -->
        <property name="maxInMemorySize" value="${mvc.maxInMemorySize}" />
        <!-- 设置最大上在内存中的大小 编码为uft-8 -->
        <property name="defaultEncoding" value="utf-8" />
    </bean>

    <!-- 验证框架 -->
    <!-- <mvc:annotation-driven validator="validator" /> <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"> <property name="providerClass" value="org.hibernate.validator.HibernateValidator" /> 如果不加默认到 使用classpath下的 ValidationMessages.properties <property name="validationMessageSource" ref="messageSource" /> </bean> -->

    <!-- 国际化 -->
    <bean id="messageSource" class="com.llsfw.core.common.ResourceBundleMessage">
        <!-- 其中basename用来指定properties文件的通用名 如实例中的messages_en.properties,messages_ja.properties通用名都是messages -->
        <property name="basenames">
            <list>
                <value>i18n.messages</value>
                <!-- <value>classpath:org/hibernate/validator/ValidationMessages</value> -->
            </list>
        </property>
        <!-- 编码 -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 设置“useCodeAsDefaultMessage”，默认为false，这样当Spring在ResourceBundle中找不到messageKey的话，就抛出NoSuchMessageException， 把它设置为True，则找不到不会抛出异常，而是使用messageKey作为返回值 -->
        <property name="useCodeAsDefaultMessage" value="false" />
    </bean>
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <!-- 设置cookieName名称，可以根据名称通过js来修改设置，默认的名称为 类名+.LOCALE如上图 -->
        <property name="cookieName" value="locale" />
        <!-- 设置最大有效时间，如果是-1，则不存储，浏览器关闭后即失效，默认为Integer.MAX_INT -->
        <!-- <property name="cookieMaxAge" value="100000" /> -->
        <!-- 设置cookie可见的地址，默认是“/”即对网站所有地址都是可见的，如果设为其它地址，则只有该地址或其后的地址才可见 -->
        <property name="cookiePath" value="/" />
    </bean>
    <mvc:interceptors>
        <bean class="com.llsfw.core.interceptor.RequestAttrLocaleChangeInterceptor">
            <property name="paramName" value="locale" />
        </bean>
    </mvc:interceptors>

    <!-- 异常处理 -->
    <bean id="exceptionResolver" class="${mvc.exceptionResolver}">
        <property name="errorPage" value="${mvc.errorPage}" />
    </bean>

    <!-- 引入shiro配置文件 -->
    <import resource="spring-mvc-shiro.xml" />
</beans>
